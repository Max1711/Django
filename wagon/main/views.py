from django.shortcuts import render
import sqlite3

def home(request):
    data = {
        'name':'Использование машинного обучения для прогнозирования отправления железнодорожных вагонов в ремонт',
        'problem': ' Описание проблемы',
        'aim': ' Цель',
        'aim_1': 'Снизить нагрузку на железнодорожную систему путем своевременного обслуживания вагонов.',
        'task':' Задача',
        'task_1':'Создать модель прогнозирования даты отправления вагона в плановый ремонт.',
        'form_task':' Постановка задачи',
        'form_task_1':'1.	найти закономерности и оценить значимые признаки;',
        'form_task_2':'2.	спрогнозировать, что вагон отправится в ПР в течение месяца;',
        'form_task_3':'3.	спрогнозировать, что вагон отправится в ПР в течение 10 дней.',
        'intro_1': 'Отправка вагона в плановый ремонт может происходить по разным причинам, как по регламенту(срок/пробег), так и из-за накопления мелких дефектов:',
        'intro_2': '- было много текущих ремонтов;',
        'intro_3': '- не было вариантов на погрузку и т.д.',
        'intro_4': 'Этих причин много, и все они влияют на возможность осуществления ремонта.',
        'intro_5': 'Вагон отправляют в ремонт после получения уведомления об их неисправности. К сожалению, текущий процесс не позволяет распределять нагрузку на ремонт депо, управлять последней заявкой на погрузку пред ремонтом и многое другое.'
    }
    return render(request, 'main/home.html', data)



def results(request):
    m = ['knn_results', 'lr_results', 'gb_results', 'cb_results', 'ttl_results']
    n = {'knn_results':'Результаты предсказания модели КНН', 'lr_results': 'Результаты предсказания модели логистической регрессии',
         'gb_results':'Результаты предсказания модели градиентного бустинга', 'cb_results': 'Результаты предсказания модели CatBoost',
         'ttl_results':'Результаты предсказания двух моделей'}
    data = {'name': n.values()}
    connect = sqlite3.connect('D:\wagon\sm_app.sqlite')
    cursor = connect.cursor()
    results =[]
    for i in m:
        tables = f"SELECT * FROM {i}"
        result = None
        try:
            cursor.execute(tables)
            result = cursor.fetchall()
        except:
            print("Eerror")
        #results.append([i  for i in result[0]])
        data[n[i]] = [j  for j in result[0]] 
    return render(request, 'main/results.html', n)          


            
